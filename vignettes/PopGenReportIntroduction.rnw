\documentclass[a4paper]{scrartcl}
\usepackage{lscape}
\usepackage[section]{placeins}
\usepackage{rotating}
\usepackage[margin=1.0in]{geometry}
\usepackage[table]{xcolor}
\usepackage[hidelinks]{hyperref}
\usepackage{pdfpages}
%\VignetteIndexEntry{PopGenReport Introduction}
%\VignetteEngine{knitr::knitr}
\begin{document}
\title{Introduction to PopGenReport}

<<c1,echo=FALSE,results='hide', message=FALSE, warning=FALSE>>=
ip <- installed.packages()
ver <- ip[which(ip[,1]=="PopGenReport"),"Version"]
require(xtable)
@
<<c1b,echo=FALSE, results='asis'>>=
cat(paste("\\subtitle {using PopGenReport Ver.",ver,"}\n"))
@
\author{Gruber \& Adamack (2013)}
\maketitle
%\tableofcontents
\newpage
\section{Overview}

The main goal of PopGenReport is to simplify population genetic analysis in R. We do this by providing an easy to use entry point for conducting basic population genetic analyses in R. A basic workflow consists of only two steps:

\begin{enumerate}
  \item {Load your data into R from an existing data file that is formatted for some of the more common genetic analysis programs (e.g. Genepop, STRUCTURE, FSTAT, GENETIX) or as a simple CSV file. }
  \item{Use the function \texttt{popgenreport} to generate a report containing a basic population genetic analysis of your dataset in an easy to read PDF format. }
\end{enumerate}

Output from the \texttt{popgenreport} function is provided in a number of formats including: a PDF report containing the complete analysis, each figure and a map of sampling locations is provided in PDF, PNG, and SNG file formats, tables are provided as CSV files.  Additionally the R code that was used to generate your analysis is provided as an output which can be used as the beginnings of a more sophisticated and customised analysis of your data.

\section{Installing PopGenReport}

The full potential of PopGenReport is only available if your computer is setup to create pdf's using LaTeX, thus we recommend installing LaTeX as well on your machine. We note that \texttt{PopGenReport} does work without LaTeX and is able to produce all of the figure, table and map output files, but without LaTeX you will not be able to create the pdf report containing your complete analysis (see example in Adamack \& Gruber (under review)). If you decide you do not want to install LaTeX on your machine, just skip the parts on the LaTeX installation below.

Additionally, you have the choice of installing R (and the \texttt{PopGenReport} package) on your computer or using a mobile version of the package. The advantage of the mobile package is that you do not need to install LaTeX on your machine (many versions take more than a Gb of space), but you are still able to choose the PDF report as an output option. Moreover the mobile version is a good choice if you want to run R (and \texttt{PopGenReport}) on different computers and/or computers where you do not have admin rights.

\subsection{Full installation, admin rights needed}

To install R and LaTeX on your computer you need to:

\begin{enumerate}
  \item {Download R (latest version)  \url{http://cran.r-project.org}}
  \item {[optional] Download an R editor (e.g. R-studio \url{http://www.rstudio.com/ide}, Tinn-r \url{http://www.sciviews.org/Tinn-R})}
  \item {Download a Latex installation (e.g. we recommend MiKTeX for Windows \url{http://miktex.org} and MacTeX for OSX \url{http://www.tug.org/mactex/})}
  \item{Install them in the following order: R, [Rstudio], MiKTeX/MacTeX following the installation instructions provided by the developers of each of the programs.}
\end{enumerate}


\subsection{Mobile installation (currently Windows only)}

To facilitate the installation process of the mobile version we have compiled a single zip file and made it available via our website: \url{www.popgenreport.org}. You can download the zip file from our website (currently windows only) and extract it into a folder of your local storage device (e.g. on a usb-drive, external hard drive or the internal hard drive on your computer). If you prefer, you can create your own mobile version by downloading R and any mobile version of LaTeX.
To use the mobileversion follow the steps below:

\begin{enumerate}
  \item {Download the file popgenreport.zip from our website: \url{http://www.popgenreport.org}. It includes a running version of R (3.0.1) and MiKTeX (portable 2.9.4757).}
  \item {Extract the PopGenPack.zip file to your usb-drive, external hard drive or a directory on your local hard drive (e.g. E:\textbackslash  on windows). }
  \item {Link R and MiKTeX. To do this you need to tell R where it can find MiKTeX. The location of MiKTeX depends on where you unzipped your zipfile to. If you unzipped it to your local usb-drive (for example E:\textbackslash  on windows then there should be an PopGenPack folder and the full command needed to tell R the location of MiKTeX is:
  
<<c2,echo=TRUE, results='markup'>>=
Sys.setenv(PATH = paste(Sys.getenv("PATH"),
"E:\\PopGenPack\\Miktex\\miktex\\bin\\", sep=.Platform$path.sep))
@
}
\end{enumerate}



\subsection{Testing your installation}
Now you can check to see if your installation was successful.
\begin{enumerate}
  \item{Start R (or your R editor) and install the latest version of the \texttt{PopGenReport} package, by typing the following code into the R-console:
<<c3,echo=TRUE, results='markup', message=FALSE, warning=FALSE>>=
# Uncomment by deleting the hash from the install.packages command
# Needs to be done only once then it is permanently on your computer.
#install.packages("PopGenReport", repos="http://cran.rstudio.com/")
require(PopGenReport)
@  
}
\item{To check the installation type:

<<c4,echo=TRUE, results='markup', message=FALSE, warning=FALSE>>=
#a short test
data(bilby)
summary(bilby)
@
}
\end{enumerate}
If the output is similar to the above then \texttt{PopGenReport} should be installed correctly and we can start with our first analysis.



\section{A basic analysis}

For our first analysis, we follow the simple two step workflow mentioned above:
\begin{enumerate}
  \item {load your data into R using various file formats (genepop, structure or a simple text or Excel csv file)}
  \item{use the function \texttt{popgenreport} to analyse your data [and create a nicely layouted pdf of your analysis (optional)}
\end{enumerate}
\subsection{Load your data}
We will be using an example dataset that is provided with \texttt{PopGenReport}, but you can also use follow along using your own dataset if it has a similar layout to our example dataset (which you'll see shortly). 

To use the example dataset that is provided with \texttt{PopGenReport} we first need to locate the file on your computer and then read it into R and then create a genind object which will be used for all of the subsequent analyses. 

You can find the path to the example file that comes with PopGenReport via:

<<c5,echo=TRUE, results='hide'>>=
paste(.libPaths()[1],"/PopGenReport/extdata/platypus1c.csv", sep="" )
@

For demonstration purposes we will first load the file as a data.frame into R so that you can see the layout of the example datafile. We will then show you how to use the \texttt{read.genetable} function to convert the datafile into a genind object and provide some tips on preparing your datafile if your dataset is in a similar format.
<<c6,echo=TRUE, results='markup'>>=
platy <- read.csv(paste(.libPaths()[1],"/PopGenReport/extdata/platypus1c.csv", sep="" ))
head(platy)
@

Knowing the location of the example file, if you want, you can now explore it in more detail using a spreadsheet program such as Excel or Calc (OpenOffice) or any other program that is capable of opening an ascii file. 

The first row of the file is a title row. Each of the following rows contains the data for a single sample/individual. The first column contains a unique identifier for the sample/individual. The title for this column must be ''ind''. The second column (optional, but strongly recommended) is the population that the animal belongs to. The title for the population column (if it is used) must be ''pop''. Separate columns are used for the latitude and longitude coordinates (given in decimal degrees) of each individual (optional) and there columns (if used) should be titled 'lat' and 'long'. As an optional alternative, Mercator coordinates (or grid points) can be used for individual spatial coordinates. If this option is used, the column titles should be 'x' and 'y'. Additional (optional) observations such as gender, age, phenotype, etc. can be placed in a contiguous block of columns. You are free to choose the column titles for these columns, but avoid using spaces and symbols in these titles as they have a tendency to create problems. Finally, comes the genetic data. Here you can use a single column per locus (with each of the alleles seperated by a defined separator <not commas>) or in the format of a single allele per column). The column titles for the genetic data are up to you, but again we discourage the use of spaces and punctuation marks in the column titles.

It is \textbf{very, very} important follow these formatting instructions if you want to import your own data. Keep the spelling and case of the column titles ('ind', 'pop', 'lat', 'long', 'x', and 'y') consistent with the formatting shown in the examples. Additionally, provide your data in the same order of columns. The number of columns can vary (e.g. if you provide more or less additional information about your samples or if you have more or fewer loci). There is some error proofing in the import function, but it is best (easiest) to stick with the example format as closely as possible. From personal experience, if your dataset isn't being imported correctly, it is most likely because you have made the mistake of doing something like typing 'latitude', 'Lat', or 'LAT' instead of 'lat'. 

If you have already formatted your data for use with programs like STRUCTURE, FSTAT, Genepop, or Genetix, you can import them without having to do any additional formatting by using the helper functions (e.g. \texttt{read.structure}) provided by \texttt{PopGenReport}, \texttt{adegenet}, and \texttt{pegas}. For more information please refer to the import functions implemented in the adegenet package. A shortcut is to type \texttt{?read.genetable} and then explore the links provided in the ''See also'' section.



<<c6b, echo=FALSE, results='asis'>>=
platy.csv <- read.csv( paste(.libPaths()[1], "/PopGenReport/extdata/platypus1c.csv",sep=""))[1:4,]
xt <- xtable(platy.csv, caption="Example of a correctly formatted data set in a spreadsheet calculator (e.g. Excel). Please make sure to use the exactly same headings, such as 'ind', 'pop', ['lat', 'long' optional] for the first columns and use unique identifiers for your allel or loci headings. Save your data set as csv file. Please be aware to use a ', as separator. In some countries Excel uses ';' as default (e.g. Germany).")
print(xt, include.rownames=FALSE, size="\\small" )

@

\FloatBarrier

Now that we have a data file in the right format, we shall import it and do our first analysis. To do this we use the \texttt{read.genetable} function.

<<c7,echo=TRUE, results='markup'>>=
platy.gen <- read.genetable( paste(.libPaths()[1], "/PopGenReport/extdata/platypus1c.csv"
, sep="" ), ind=1, pop=2, lat=3, long=4, other.min=5, other.max=6, oneColPerAll=FALSE, 
sep="/", ploidy=2)

platy.gen  #to check the data. 
@

The read.gentable function has some arguments that need to be explained. First you need to provide the path to the file you want to load. Please be aware the R uses forward slashes '/' as a seperator to specify a path. So if your file is in a folder say "d:/temp/" then the first argument in read.genetable would be:

\texttt{read.genetable('D:/temp/mydata.csv')}
\newline
The following arguments specify the column number of specific entries (e.g. ind, lat and long). Some arguments are optional and some are compulsory. For a detailed description please refer to the help pages of the \texttt{?read.genetable} function. In brief

\begin{table}[ht]
\centering
\begin{tabular}{lll}
   \hline
argument & description& optional\\ 
\hline
  \rowcolor[gray]{0.9} ind &  \textbf{unique} identifier of individuals & no\\ 
  \rowcolor[gray]{0.8} pop &  indentifier of subpopulations optional & yes\\
  \rowcolor[gray]{0.9} lat, long &  coordinates in WGS84 (latitude and longitude) & yes\\
  \rowcolor[gray]{0.8} x,y & coordinates in Mercator projection (\texttt{?Mercator})& yes\\   
  \rowcolor[gray]{0.9} other.min, other.max &  min to max column number with additional data & yes\\
  \rowcolor[gray]{0.8} oneColPerAll &  are the alleles coded using a single or multiple columns & no\\
  \rowcolor[gray]{0.9} sep &  character if alleles are within one column & yes\\
  \rowcolor[gray]{0.8} ncode &  integer for the number of characters to code one genotype & yes\\
  \rowcolor[gray]{0.9} ploidy &  integer indicating the degree of ploidy of the genotypes & yes\\
  \rowcolor[gray]{0.8} missing &  default NA, char for missing data, check help page for options  & yes\\
\hline
\end{tabular}
\caption{arguments of \texttt{read.genetable}} 
\end{table}

In our data set the first column was unique identifiers ('ind'; ind=1), the second was population ('pop'; pop=2), coordinates were provided as latitidues and longitudes ('lat' and 'long') in columns 3 and 4 (lat=3, long=4), then we had some additional data in columns 5 and 6, (other.min=5, other.max=6) and the remainder of the columns were for our genotypes. They are coded as oneColPerAll=FALSE and therefore we need to specify a seperator ''/''. ncode is obvious but we could have specified it as being 3 (as we use 3 digits to code alleles) and finally ploidy=2 and missing was not specified (as we have no missing data, so the default NA is fine).

Again, it is \textbf{very, very} important follow the formatting requirements closely when you import your own data. Keep the headings exactly as shown in the examples and use the same column order (though not necessarily number of columns). The import function has some error proofing built in with respect to the formatting, but  it is best to stick as closely to the the example format as possible. 

\subsection{Analysing your data}

It is a good idea to check if your data import was successful. When you are first checking to see that your data has been imported correctly, there are a few details you can quickly check by typing type the name of the object \texttt{platy.gen} and then checking some of the entries. First, for the line @tab does the first number match the number of individuals in your data set? If the answer is yes then good, otherwise something didn't work right. The second number on the line is equivalent to the total number of alleles in your dataset. That may or may not be readily known beforehand, if you do know this number does it match? A second place to check is the line @loc.names. Does the size of the vector match up with the number of loci in your dataset? A third area to check is the lines for @pop and @pop.names. If these datasets are blank (in our example type \texttt{platy.gen@pop} and \texttt{platy.gen@pop.names}) it could indicate that there was a problem with importing your data (or you may not have provided population information for your data as it is an optional item). Finally, if you provided optional data such as latitudes and longitudes, ages, or phenotypic data etc., is that data listed on the line @other?

Once you are reasonably sure that the import was successful (or if something didn't go right, you can get an idea as to what went wrong) by looking at some of the details of your dataset. For example the number and names of individuals can be found in the \texttt{@ind.names} slot. If you have specified populations in your data set using the pop column we can check this using the \texttt{pop} function on our genind object. 
<<c8,echo=TRUE, results='markup'>>=
platy.gen@ind.names  #check the number and names of individuals
pop(platy.gen) #similar to platy.gen@pop
platy.gen@loc.names #names of all loci
platy.gen@loc.fac  #the number of allels per loci. e.g. the first locus has 4 alleles
table(platy.gen@loc.fac) # a better way to check the number of alleles per loci
platy.gen@all.names #allele names for each loci
@

The genetic data for each individual is stored within the tab slot. 
<<c9,echo=TRUE, results='markup'>>=
platy.gen@tab
@

For a full description please refer to the adegent package (\texttt{?genind}) and check out some of the tutorial vignettes provided at \url{adegenet.r-forge.r-project.org}. In short each locus has its own column. As there are 4 alleles at the first loci, the first 4 columns are named L1.1 to L1.4 and belong to the first locus. The first individuals had the two alleles, 141 and 145, which correspond to alleles 1 and allele 3 at the first loci. Hence the first individual has an entry of 0.5 at L1.1 and L1.3. You can easily see that the second individuals is homozygote at the first loci (the entry was 145/145)

One big advantage of using the \texttt{read.genetable} function is the ability to include spatial data directly in a genind object. Spatial coordinates are necessary for a number of analysis such as spatial autocorrelation and for producing a map of your data. As the original genind object did not have a slot for spatial data, we used the ''other'' slot to include additional data such as coordinates for each individual (latlong or xy).  

There are several items listed in the ''other'' slot. We can access the data that was stored in our additional columns and our coordinates here. 
<<c10,echo=TRUE, results='markup'>>=
str(platy.gen@other)  #lists the content of the slot
@

We can produce a very crude plot of our sampling locations using the coordinates and set the symbols and colors of our individuals using the age and group columns.
<<xyplot, echo=TRUE, results='as.is', fig.width=4,fig.height=4 >>=
plot(platy.gen@other$latlong, pch=as.numeric(platy.gen@other$data$group)+15, col=platy.gen@other$data$age)
@

Now that we are confident that the our dataset has been imported data was successful let's start our first population genetics analysis.

We would first like to get a simple overview on our genotypes, for example how many alleles are there in our dataset, how many individuals are there in each population sample, how many alleles are there in each population, etc. To do this we can use our ''work horse'' function \texttt{popgenreport}.
The function has a lot of arguments (you can check them via the help page\texttt{?popgenreport}). Except for the first argument, all of the arguments are set to a default value and  can be omitted if we want. The function's first argument is simply the name of our newly created genind object, which contains all of the data needed to do our analysis. To specify which analyses are performed, we use the \texttt{mk} switches (for a description of all of the  available switches see the table below or check ?popgenreport). As we only want to some basic counts from our data set, we set the \texttt{mk.counts} switch to \texttt{TRUE}.
To make it easier to find the results we specify an additional argument, namely the path.pgr argument, which specifies the main file path, where all of our results will be saved. We \textbf{STRONGLY RECOMMEND} that your main file path not have any spaces or punctuation marks in the folder names. If you do have spaces or punctuation marks in your folder names, the function will try to replace them with underscores and may create new folders on your drive if you have admin rights on that drive. If you don't have admin rights, the \texttt{popgenreport} function may fail to successfully run. Ommitting the path argument will cause your results to be saved in a temporary folder that may be erased once you close your R session. Please specify an already existing folder (where you have write access) otherwise you will get an error message. Be aware if you run popgenreport for the first time, that your LaTeX installation may need to download additional packages (MiKTeX and other LaTeX installations trigger these downloads automatically). For this you need an internet connection (only once) and also some patience in case the response of the server is slow.
\textbf{Please note: Due to technical reasons we always set \texttt{mk.pdf=FALSE}} (otherwise the vignette would not compile) when we run the function \texttt{popgenreport} during the tutorial (the technical reason is this manual is a vignette and you cannot run knitr within knitr, without causing errors...). If you want to have a pdf report set \texttt{mk.pdf=TRUE} in the examples.

<<c11,echo=TRUE,  results='markup', tidy=FALSE>>=
### for technical reasons we set here mk.pdf=FALSE 
### please set mk.pdf=TRUE if you want to have a report !!!!!!
platy.out1 <- popgenreport(platy.gen, mk.counts=TRUE, mk.pdf=FALSE, 
                           foldername="platy")
@

If you did not install LaTeX on your system, you will get an error message that a pdf cannot be created. As was mentioned previously, you still can run \texttt{popgenreport} but you will need to specify that you do not want to create a PDF report by setting the switch \texttt{mk.pdf=FALSE}. 
<<c12,echo=TRUE, results='markup', tidy=FALSE>>=
platy.out1 <- popgenreport(platy.gen, mk.counts=TRUE, mk.pdf=FALSE, 
                           foldername="platy")
@


In both cases \texttt{popgenreport} creates an object called \texttt{platy.out1} that has all the results for this analysis. To get an overview of our results, we type the \texttt{summary} command. 
<<c13,echo=TRUE, results='markup'>>=
summary(platy.out1)
platy.out1
@
So there are 7 objects in this list. To look at the content in more detail just type the name \texttt{platy.out1}.

We can use the object \texttt{platy.out1} to create some new outputs. For example we can plot the total number of alleles per population using a barplot.
<<allperpop, echo=TRUE, fig.width=6, fig.height=4>>=
barplot(platy.out1$counts$nallelesbypop)
@
\FloatBarrier
Obviously this can be a bit tedious and most of these analysis are fairly simple. Thus, we developed the \texttt{popgenreport mk.counts} analysis to automate the process of doing these simple analyses. The function creates a suit of figures and tables that can be inspected in a subfolder called ''results'' (e.g. D:/Analysis/results if we specified D:/Analysis as path) . This folder will be created if it does not exist so make sure you have write access in the specified path. If not path is specified the tempdir() folder of R is used. If you did install LaTeX there will also be a PDF report of your analysis with some explanations of what the different figures and tables show. 

Using R, you can check the content of your results folder by typing:
<<c14,echo=TRUE, results='markup'>>=
dir(paste(tempdir(),"platy",sep=.Platform$file.sep))
@
Feel free to inspect the report PopGenReport.pdf and all the files created using your prefered file explorer. The next section shows the pdf report you have just created.

\subsection{PDF report created by \texttt{popgenreport} using \texttt{mk.counts=TRUE}}
\includepdf[pages={-}]{./figures/PopGenReport_counts.pdf}


\section{A complete analysis}
Now that you have learned the necessary steps to do a simply analysis, we will now create a  full report, that demonstrates all of the standard outputs produced by popgenreport. Instead of using the \texttt{mk.counts=TRUE} switch we will instead use the \texttt{mk.complete=TRUE} to create a full report. To make it a bit more interesting we will use a bigger data set that comes with \texttt{popgenreport}. We load this data set using the data function as it is included with the \texttt{PopGenReport} pacakge as a saved genind object. In addition we would like to create an R file that shows how the whole analysis was done. The R file can be used as a start for performing a customised analysis.

<<c15,echo=TRUE,  results='markup', tidy=FALSE>>=
data(bilby)
### for technical reasons we set here mk.pdf=FALSE 
### please set mk.pdf=TRUE if you want to have a report !!!!!!
bilby.complete <- popgenreport(bilby, mk.complete=TRUE, mk.Rcode=TRUE,
                               mk.pdf=FALSE)
@

Again you can find the output created in the specified folder. The full report on the bilby data set is attached to end of this pdf.


The table below gives an overview on the currently implemented analyses. 

\begin{table}[ht]
\centering
\begin{tabular}{ll}
   \hline
switch & description\\ 
\hline
  \rowcolor[gray]{0.9} mk.counts &  provide overview counts of samples, loci, and alleles\\
  \rowcolor[gray]{0.8} mk.map &  produce a map of individual locations; colours and point shapes can be customised\\
  \rowcolor[gray]{0.9} mk.lozihz &  calculate observed and expected heterozygosity\\
  \rowcolor[gray]{0.8} mk.hwe &  test for Hardy-Weinberg equilibrium\\
  \rowcolor[gray]{0.9} mk.fst &  calculate F-statistics\\
  \rowcolor[gray]{0.8} mk.gd.smouse &  individual pairwise genetic distances based on Smouse \& Peakall (1999)\\
  \rowcolor[gray]{0.9} mk.gd.kosman &  individual pairwise genetic distances based on Kosman \& Leonhard (2005)\\
  \rowcolor[gray]{0.8} mk.pcoa & Principal component analysis following Jombart et al. (2009)\\
  \rowcolor[gray]{0.9} mk.spautocor & Spatial autocorrelation analysis following Smouse \& Peakall (1999) \\
  \rowcolor[gray]{0.8} mk.allele.dist & allele distributions by loci and subpopulation; identify any private alleles \\
  \rowcolor[gray]{0.9} mk.null.all & check for null alleles \\
  \rowcolor[gray]{0.8} mk.allel.rich & allelic richness following El Mousadik and Petit (1996) \\
  \rowcolor[gray]{0.9} mk.differ.stats &  population differentiation statistics (Nei's Gst, Hedrick's Gst, and Jost's D) from \texttt{mmod} \\
\rowcolor[gray]{0.8} mk.custom & create your own analysis by editing the file custom.snw\\
\rowcolor[gray]{0.9} mk.Rcode & to get the full R script that is used to generate the report \\
  \rowcolor[gray]{0.8} mk.complete & which you can customize for your analytical needs.\\
   \rowcolor[gray]{0.9} mk.pdf &  create a PDF report \\
\hline
\end{tabular}
\caption{arguments of \texttt{popgenreport}} 
\end{table}
\FloatBarrier
\subsection{Customise an analysis}
\subsubsection{Running subsets of data set}
In addition to the report you also get all of the results back in a single large object from which you can extract data in order to perform more sophisticated and customised analyses or to simply create graphs that better match your needs.
\newline
When looking at the PDF report we see that there isn't much differentiation between the populations (e.g. pairwise Fst is quite low). It might be interesting to separate the analysis by sex and then check pairwise Fst for each sex seperately. To do this we need to run the popgenreport function for the each subset seperately.
<<c16,echo=TRUE,  results='markup'>>=
### for technical reasons we set here mk.pdf=FALSE 
### please set mk.pdf=TRUE if you want to have a report !!!!!!
bilby.fem <- popgenreport(bilby[bilby@other$sex=="Female"], 
path.pgr=tempdir(), fname="Female", mk.fst=TRUE, mk.counts=FALSE,mk.pdf=FALSE)

### for technical reasons we set here mk.pdf=FALSE 
### please set mk.pdf=TRUE if you want to have a report !!!!!!
bilby.mal <- popgenreport(bilby[bilby@other$sex=="Male"], 
path.pgr=tempdir(), fname="Male", mk.fst=TRUE, mk.counts=FALSE,mk.pdf=FALSE)
@

We would like to see if our pairwise Fst for males are always higher than the ones for females. In our objects we find the pairwise Fsts for each sex in the slot: $fst$FSTpairwise. We then compare the two sets of pairwise Fsts by eye and we can see that the pairwise Fsts for males are generally lower (except in the pair NSW-ACT) 
<<c17,echo=TRUE, results='markup'>>=
bilby.mal
bilby.fem
bilby.mal$fst$FSTpairwise> bilby.fem$fst$FSTpairwise
@

\subsubsection{Reprojecting spatial data and attaching it to a genind object}
It may be that you have already imported your data into another program (e.g. structure) and you simply want to run popgenreport with it to produce a map of your study area. To do this you will need to somehow attach your coordinates to your data set.
We start with the usual situation that we have a data set and import it into R via \texttt{read.genetable}. This time the dataset is for Tasmanian tigers. There are rumors that a few Tasmanian tigers still roam across portions of the mainland of Australia and scats were collected in an attempt to detect their presence. You were asked to analyse the microsatellite data and produce a map from the sampling locations. Unfortunately the coordinates are not in the required geographic projection (e.g. latitudes and longitudes in decimal degrees), but instead were projected using the UTM system (UTM zone 55S). 
We first need to reproject the data so that \texttt{PopGenReport} is able to produce a map. To do this, we first load the data. Again we use a data set provided via the \texttt{PopGenReport} package and load it via the \texttt{read.genetable} function.

<<c18,echo=TRUE, results='markup',message=FALSE, tidy=FALSE>>=

#### convert from utm 55S to latlong WGS84

tiger.gen <- read.genetable( paste(.libPaths()[1],"/PopGenReport/extdata/tiger.csv",
sep="" ), ind=1, pop=2, other.min=3, other.max=6, oneColPerAll=TRUE)


require(rgdal) #load package
xy <- as.matrix(tiger.gen@other$data[,2:1])  #y first then x
#projection from utm 55S to latlong WGS84
latslongs <-project(xy, 
"+proj=utm +zone=55 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs",inv=T) 

#add it to tiger.gen at the right place (again lats)
tiger.gen@other$latlong <- latslongs[,2:1] #again lat and then long
@

Now we attach the reprojected coordinates to \texttt{tiger.gen} and make our customised map. For all the available options, please check the \texttt{popgenreport} help page.
<<c19,echo=TRUE,  results='markup'>>=
#customised map
### for technical reasons we set here mk.pdf=FALSE 
### please set mk.pdf=TRUE if you want to have a report !!!!!!
popgenreport(tiger.gen, mk.map=TRUE,mk.counts=FALSE, path.pgr=tempdir(),
mapdotcolor="orange", mapdotsize=as.numeric(tiger.gen@other$data$sex), 
maptype="roadmap", mapdotalpha=0.9,mk.pdf=FALSE)
@

\begin{figure}[h]
\centering
\includegraphics[width=0.8\textwidth]{./figures/tiger-map}
\caption{Occurrences of Tasmaninan Tiger scats}
\label{fig:tiger}
\end{figure}

\FloatBarrier

\subsubsection{Creating your own analysis for inclusion in the PDF report} 
PopGenReport is meant to serve as a common framework for analysing genetic data. To facilitate this and to allow researchers to customise it for their own needs, we have included a switch in the \texttt{popgenreport} function, \texttt{mk.custom}. If this switch is set to ''\texttt{TRUE}'' a template snw file is run (custom.snw). This file is meant provide a template to demonstrate how a popgenreport function works. The popgenreport function basically combines a series of knitr files, each one performing a specified analysis and creates a series of outputs (pdf, figures and tables). It is straight forward to create your own type of analysis by editing the custom.snw file and including it in the report. The location of the custom.snw file can be found via: 
paste(.libPaths()[1],"/PopGenReport/swchunks/custom.snw",sep=""). 
Below you can see the whole file.

<<c20,echo=TRUE, results='hide'>>=
#custom.snw file
snw <- readLines(paste(.libPaths()[1],"/PopGenReport/swchunks/custom.snw", sep="" ))
@

<<c21,echo=FALSE, results='asis'>>=
snwtab <- xtable(data.frame(snw))
print(snwtab )
@
\FloatBarrier

Everything up to line 8 in the file is a part of the LaTeX environment. We define the headings and provide some text for a description. To learn how to code LaTeX and how to write documents please refer to any of the the hundreds of manual you can find on the web (e.g \url{http://latex-project.org/guides/}). Line 9 - 19 are the first so-called ''knitr chunks'', which is basically normal R code. The genind object which contains all the data inside the popgenreport function is called ''cats''. When using data from your genind object in your custom function you will need to refer to the genind object 'cats' rather than the name of the genind object containing your data.  
In this simple example we create a summary and store one part of the output (\$pop.eff) in the results. If you want to print your output as a table, you will need to convert your results into a data.frame and then print it via the \texttt{xtable} function (lines 23 - 28) in a new knitr-chunk.
Lines 37 - 40 create a figure (a simple pie chart). The default figure settings is for all figures to be created in the PDF, SVG, and PNG file formats and be saved as files in the results folder.
Line 43 - 46 is necessary if you want to make sure your result is returned by the \texttt{popgenreport} function so that you can use your results for further analysis. It is stored  in the custom slot.
To ''play'' with this file, it is best to create a backup of your files and then change parts of the code one by one and then run popgenreport using the \texttt{mk.custom=TRUE} switch.
\section{Further reading and tutorials}
There are a number of great resources how to use R and genetic data. We list them here, if you are aware of further tutorials please let us know.
\begin{itemize}
  \item {Tutorials in \texttt{PopGenReport}: \texttt{browseVignettes("PopGenReport")}} 
  \item {Tutorials in \texttt{adegenet}: \texttt{browseVignettes("adegenet")}}
  \item {Tutorials in \texttt{mmod}: \texttt{browseVignettes("mmod")}}
  \item {Tutorials in \texttt{gap}: \texttt{browseVignettes("gap")}}
  \item {Overview on other R genetics packages: \url{http://cran.r-project.org/web/views/Genetics.html}}
  \item {There are plenty of general introductions to R. One we like is in the simpleR package from John Verzani (discontinued) \url{http://www.math.csi.cuny.edu/Statistics/R/simpleR}}
  
    
\end{itemize}


\section{Contacts}

Please do not hesitate to contact the authors of \texttt{PopGenReport} if you have comments regarding the package. First of all we are certain there will still be ''bugs'' in the code as it is impossible to test it under all conditions. Additionally, we would like to expand the capabilities of PopGenReport in the future and comments on important functions that are missing are most welcome. For further updates please check our website: \url{www.popgenreport.org}.\\
\newline Have fun running \texttt{PopGenReport} and may there be exciting results :-)\\
\newline Bernd \& Aaron\\
\newline bernd.gruber@canberra.edu.au\\
aaron.adamack@canberra.edu.au


\FloatBarrier
\section{Attachement: Full pdf report on the bilby data set}
\includepdf[pages={-}]{./figures/PopGenReport_bilby.pdf}

\end{document}




